<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法与数据结构 on </title>
    <link>https://feilengcui008.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 算法与数据结构 on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Mar 2016 17:21:15 +0800</lastBuildDate>
    <atom:link href="https://feilengcui008.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KMP简单证明</title>
      <link>https://feilengcui008.github.io/bak/kmp%E7%AE%80%E5%8D%95%E8%AF%81%E6%98%8E/</link>
      <pubDate>Thu, 03 Mar 2016 17:21:15 +0800</pubDate>
      <guid>https://feilengcui008.github.io/bak/kmp%E7%AE%80%E5%8D%95%E8%AF%81%E6%98%8E/</guid>
      <description>&lt;p&gt;在简单证明KMP之前，先分析一下朴素算法以及一种模式串没有相同字符的特殊情况下的变形，方便一步一步导入KMP算法的思路中。&lt;/p&gt;&#xA;&lt;h4 id=&#34;朴素算法&#34;&gt;朴素算法&lt;/h4&gt;&#xA;&lt;p&gt;朴素算法比较明了，不再赘述，下面是简单的代码：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  // time : O(n*m), space : O(1)&#xA;  int naive(const std::string &amp;amp;text, const std::string &amp;amp;pattern)&#xA;  {&#xA;    // corner case &#xA;    int len1 = text.length();&#xA;    int len2 = pattern.length();&#xA;    if (len2 &amp;gt; len1) return -1;&#xA;    int end = len1 - len2;&#xA;    for (int i = 0; i &amp;lt;= end; ++i) {&#xA;      int j;&#xA;      for (j = 0; j &amp;lt; len2; ++j) {&#xA;        if (text[i + j] != pattern[j]) {&#xA;          break;&#xA;        }&#xA;      }&#xA;      if (j == len2) return i;&#xA;    }&#xA;    return -1;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;分析朴素算法我们会发现，实际上对于模式串某个不匹配的位置，我们没有充分利用不匹配时产生的信息，或者说不匹配位置之前&#xA;的已匹配的相同前缀的信息。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
