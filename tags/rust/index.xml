<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on 靠谱</title>
    <link>https://feilengcui008.github.io/tags/rust/</link>
    <description>Recent content in Rust on 靠谱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Jun 2023 19:52:51 +0800</lastBuildDate><atom:link href="https://feilengcui008.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust实践</title>
      <link>https://feilengcui008.github.io/post/rust%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 28 Jun 2023 19:52:51 +0800</pubDate>
      
      <guid>https://feilengcui008.github.io/post/rust%E5%AE%9E%E8%B7%B5/</guid>
      <description>依赖关系、引用、计数（Arc）与锁（Mutex）  功能模块的设计清晰，最终一定是DAG，即使出现循环依赖也可以通过抽取公共部分为第三模块来解除循环依  Rust里类型初始化每个成员必须强制显示初始化，所以这种循环依赖其实写不出来，虽然也可以通过Option来绕过，但是不推荐这种做法   引用是表达依赖关系的方式  当一个模块只被某个模块唯一引用那么其实就是own的关系，这时在模块初始化时用move语义即可（即拥有所有权） 当一个模块被多个模块引用时，会出现生命周期问题，即：被引用模块的生命周期需要大于等于引用它的所有模块的生命周期，否则容易出现use after free问题 依赖关系不只是模块（struct）间，也可能是此struct方法成员启动的协程/线程间，每个协程/线程都有自己的生命周期，通过struct方法启动则说明对其有依赖，也就是此struct会被多方引用（即依赖）   原子计数（Arc）是解决多引用生命周期问题很自然的工具，类似C++智能指针。Arc对象可以被clone，这样每个引用者就可以own此Arc的拷贝（注意own的是Arc拷贝的所有权，而不是持有引用），而通过此Arc的拷贝，间接持有了目标对象的引用，而Arc的原子计数可以保证目标对象的生命周期至少比其所有引用持有者长。 当目标对象通过Arc被多方持有后，生命周期问题得以解决（不会出现use after free问题），但是多个引用者需要并发访问（读写）目标对象。显然，只有Arc原子引用计数是不够的（并且Rust的借用规则并不允许多个&amp;amp;mut），这里需要做到共享与互斥，也就需要Atomic/Mutex/RwLock来控制对通过Arc引用的目标对象的并发读写。（不要去管Send/Sync，定义很难理解&amp;quot;准确&amp;quot;） 以上，是Arc&amp;lt;Mutex&amp;gt;、Arc&amp;lt;RwLock&amp;gt;常见用法的由来。常见模式：  Handler -&amp;gt; TableManager -&amp;gt; ElectionInfo Handler -&amp;gt; TabletManager -&amp;gt; ElectionInfo pub struct Handler { pub table_manager: Arc&amp;lt;TableManager&amp;gt;, // 持有Arc副本 pub tablet_manager: Arc&amp;lt;TabletManager&amp;gt;, } pub struct TableManager { election_info: Arc&amp;lt;ElectionInfo&amp;gt;, } pub struct TabletManager { election_info: Arc&amp;lt;ElectionInfo&amp;gt;, tablets: RwLock&amp;lt;TabletRouter&amp;gt;, // 并发读写 id_allocator: AtomicU64, // 并发读写 } // 怎么用 let election_info = Arc::new(ElectionInfo::new()); let table_manager = Arc::new(TableManager::new(election_info.</description>
    </item>
    
  </channel>
</rss>
